{"version":3,"sources":["context.js","TodoList/TodoItem.js","TodoList/TodoList.js","loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginTop","input","margin","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","className","style","join","type","checked","id","title","onClick","bind","ul","listStyle","TodoList","prevProps","prevState","todos","this","props","localStorage","setItem","JSON","stringify","item","parse","getItem","console","log","setLocalTodo","map","key","onToggle","Component","Modal","state","isOpen","Fragment","setState","AddTodo","lazy","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","length","todoes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d27b4034.chunk.js","sourcesContent":["import React from 'react'\n\nconst Context = React.createContext()\n\nexport default Context","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Context from '../context'\n\nconst styles = {\n    li: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '.5rem 1rem',\n        border: '1px solid #ccc',\n        borderRadius: '4px',\n        marginTop: '1.5rem'\n    },\n    input: {\n        margin: '1rem'\n    }\n}\n\n\nfunction TodoItem({ todo, index, onChange }) {\n    const { removeTodo } = useContext(Context)\n    const classes = ['chkbox']\n\n    if (todo.completed) {\n        classes.push('done')\n    }\n\n    return (\n        <ul>\n            <label>\n                <li className='li-items' style={styles.li}>\n                    <span className={classes.join(' ')}>\n                            <input type=\"checkbox\"\n                            checked={todo.completed}\n                            style={styles.input}\n                            onChange={() => onChange(todo.id)} />\n                            <span></span>\n                            <strong>{index + 1}</strong> &nbsp; {todo.title}\n                        \n                    </span>\n                    <button className=\"rm\" onClick={removeTodo.bind(null,todo.id)}>&times;</button>\n                </li>\n            </label>\n\t\t</ul>\n    )\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    index: PropTypes.number,\n    onChange: PropTypes.func.isRequired\n}\n\n\nexport default TodoItem","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem.js';\n\nconst styles = {\n    ul: {\n        listStyle: 'none',\n        margin: 0,\n        padding: 0\n    }\n}\n\n class TodoList extends React.Component {\n    componentDidUpdate(prevProps, prevState) {\n            if (prevProps.todos !== this.props.todos) {\n                localStorage.setItem('itemKey', JSON.stringify(this.props.todos));\n            }\n    }\n    componentWillMount() { \n        var item = JSON.parse(localStorage.getItem('itemKey'));\n        console.log(this.props.todos)\n        console.log(item)\n        this.props.setLocalTodo(item);\n    }\n\n    render(){\n        return (\n            <ul style={styles.ul}>\n            {this.props.todos.map( (todo,index)  =>{\n                return <TodoItem todo={todo} key={todo.id} index={index} onChange={this.props.onToggle}/>\n            })}\n            </ul>\n        );\n    }\n}\nTodoList.propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onToggle: PropTypes.func.isRequired\n}\n\n\n\nexport default TodoList","import React from 'react'\n\nexport default () =>\n<div style={{display:'flex',justifyContent:'center',margin:'.5rem'}}><div className=\"lds-dual-ring\" /></div>","import React from 'react'\nimport './Modal.css'\n\nexport default class Modal extends React.Component {\n\n    state = {\n        isOpen: false\n    }\n\n    render() {\n        return (\n            <React.Fragment >\n\t\t\t<button className='info-button infb1-s infb1-p' onClick={()=>this.setState({isOpen: true})}>\n\t\t\tInformation\n\t\t\t</button>\n\t\t\t{this.state.isOpen && (<div className = \"modal\" onClick={()=>this.setState({isOpen:false})} >\n\t\t\t\t\t\t            <div className=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t\t<h1>Information about this Todo</h1>\n\t\t\t\t\t\t\t\t\t\t\t<p>You can create new tasks, highlight completed ones, and delete redundant ones </p>\n\t\t\t\t\t\t\t\t\t\t\t<div className='anim-button'>\n\t\t\t\t\t\t\t\t\t\t\t\t<a onClick={()=>this.setState({isOpen:false})}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div> )}\n\t\t\t\t</React.Fragment>\n        )\n    }\n}","import React, { useEffect } from 'react';\nimport './App.css';\nimport TodoList from './TodoList/TodoList'\nimport Context from './context'\nimport Loader from './loader'\nimport Modal from './Modal/Modal'\n\n\nconst AddTodo = React.lazy(() => import('./TodoList/AddTodo'))\n\n\n//{ id: 1, completed: false, title: 'Buy bred' }, { id: 2, completed: false, title: 'Buy butter' }, { id: 3, completed: false, title: 'Buy milk' }\n\nfunction App() {\n    var [todos, setTodos] = React.useState([])\n    const [loading, setLoading] = React.useState(true)\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n            .then(response => response.json())\n            .then(todos => {\n                setTimeout(() => {\n                    setTodos(todos)\n                    setLoading(false)\n                }, 2000)\n            })\n    }, [])\n\n    function toggleTodo(id) {\n        setTodos(\n            todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed\n                }\n                return todo\n            }))\n    }\n\n    function removeTodo(id) {\n        setTodos(todos.filter(todo => todo.id !== id))\n    }\n\n    function addTodo(title) {\n        setTodos(\n            todos.concat([{\n                title,\n                id: Date.now(),\n                completed: false\n            }])\n        )\n    }\n    function localTodo(todoes){\n        setTodos(\n            todos=todoes\n        )\n    }\n    \n    return (\n        <Context.Provider value={{removeTodo}}>\n        <div className='main'>\n            <div className=\"wrapper\">\n                <div className='head-title'>\n                    <h1>Todo list</h1>\n                    <br/>\n                    <hr/>\n                    <Modal />\n                </div>\n                <React.Suspense fallback={<p>Loading....</p>}>\n                    <AddTodo onCreate={addTodo}/>\n                </React.Suspense>\n\n                {loading && <Loader />}\n\n                {todos.length ? (\n                < TodoList setLocalTodo={localTodo} todos={todos} onToggle={toggleTodo}/ >\n                ):(\n                loading ? null :\n                <p>No todos!</p>\n                )\n                }\n            </div>\n         </div>\n      </Context.Provider>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}